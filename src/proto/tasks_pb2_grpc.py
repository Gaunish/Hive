# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

#import tasks_pb2 as tasks__pb2
from src.proto import tasks_pb2 as tasks__pb2

class TaskServiceStub(object):
    """Service responsible for tasks
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTask = channel.unary_unary(
                '/tasks.TaskService/ExecuteTask',
                request_serializer=tasks__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=tasks__pb2.ExecuteReply.FromString,
                )
        self.CancelTask = channel.unary_unary(
                '/tasks.TaskService/CancelTask',
                request_serializer=tasks__pb2.CancelRequest.SerializeToString,
                response_deserializer=tasks__pb2.CancelReply.FromString,
                )


class TaskServiceServicer(object):
    """Service responsible for tasks
    """

    def ExecuteTask(self, request, context):
        """Executes a task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """Cancels running task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=tasks__pb2.ExecuteRequest.FromString,
                    response_serializer=tasks__pb2.ExecuteReply.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=tasks__pb2.CancelRequest.FromString,
                    response_serializer=tasks__pb2.CancelReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tasks.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """Service responsible for tasks
    """

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tasks.TaskService/ExecuteTask',
            tasks__pb2.ExecuteRequest.SerializeToString,
            tasks__pb2.ExecuteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tasks.TaskService/CancelTask',
            tasks__pb2.CancelRequest.SerializeToString,
            tasks__pb2.CancelReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
